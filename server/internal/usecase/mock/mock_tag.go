// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/tag.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/tag.go -destination=./internal/usecase/mock/mock_tag.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/pillowskiy/gopix/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTagRepository is a mock of TagRepository interface.
type MockTagRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTagRepositoryMockRecorder
}

// MockTagRepositoryMockRecorder is the mock recorder for MockTagRepository.
type MockTagRepositoryMockRecorder struct {
	mock *MockTagRepository
}

// NewMockTagRepository creates a new mock instance.
func NewMockTagRepository(ctrl *gomock.Controller) *MockTagRepository {
	mock := &MockTagRepository{ctrl: ctrl}
	mock.recorder = &MockTagRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagRepository) EXPECT() *MockTagRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTagRepository) Create(ctx context.Context, tag *domain.Tag) (*domain.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tag)
	ret0, _ := ret[0].(*domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTagRepositoryMockRecorder) Create(ctx, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTagRepository)(nil).Create), ctx, tag)
}

// Delete mocks base method.
func (m *MockTagRepository) Delete(ctx context.Context, id domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTagRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTagRepository)(nil).Delete), ctx, id)
}

// DeleteImageTag mocks base method.
func (m *MockTagRepository) DeleteImageTag(ctx context.Context, imageID, tagID domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageTag", ctx, imageID, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageTag indicates an expected call of DeleteImageTag.
func (mr *MockTagRepositoryMockRecorder) DeleteImageTag(ctx, imageID, tagID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageTag", reflect.TypeOf((*MockTagRepository)(nil).DeleteImageTag), ctx, imageID, tagID)
}

// GetByID mocks base method.
func (m *MockTagRepository) GetByID(ctx context.Context, id domain.ID) (*domain.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTagRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTagRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockTagRepository) GetByName(ctx context.Context, name string) (*domain.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockTagRepositoryMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockTagRepository)(nil).GetByName), ctx, name)
}

// Search mocks base method.
func (m *MockTagRepository) Search(ctx context.Context, name string) ([]domain.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, name)
	ret0, _ := ret[0].([]domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockTagRepositoryMockRecorder) Search(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockTagRepository)(nil).Search), ctx, name)
}

// UpsertImageTags mocks base method.
func (m *MockTagRepository) UpsertImageTags(ctx context.Context, tag *domain.Tag, imageID domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertImageTags", ctx, tag, imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertImageTags indicates an expected call of UpsertImageTags.
func (mr *MockTagRepositoryMockRecorder) UpsertImageTags(ctx, tag, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertImageTags", reflect.TypeOf((*MockTagRepository)(nil).UpsertImageTags), ctx, tag, imageID)
}

// MockTagImageUseCase is a mock of TagImageUseCase interface.
type MockTagImageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTagImageUseCaseMockRecorder
}

// MockTagImageUseCaseMockRecorder is the mock recorder for MockTagImageUseCase.
type MockTagImageUseCaseMockRecorder struct {
	mock *MockTagImageUseCase
}

// NewMockTagImageUseCase creates a new mock instance.
func NewMockTagImageUseCase(ctrl *gomock.Controller) *MockTagImageUseCase {
	mock := &MockTagImageUseCase{ctrl: ctrl}
	mock.recorder = &MockTagImageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagImageUseCase) EXPECT() *MockTagImageUseCaseMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockTagImageUseCase) GetByID(ctx context.Context, id domain.ID) (*domain.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTagImageUseCaseMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTagImageUseCase)(nil).GetByID), ctx, id)
}

// MockTagAccessPolicy is a mock of TagAccessPolicy interface.
type MockTagAccessPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockTagAccessPolicyMockRecorder
}

// MockTagAccessPolicyMockRecorder is the mock recorder for MockTagAccessPolicy.
type MockTagAccessPolicyMockRecorder struct {
	mock *MockTagAccessPolicy
}

// NewMockTagAccessPolicy creates a new mock instance.
func NewMockTagAccessPolicy(ctrl *gomock.Controller) *MockTagAccessPolicy {
	mock := &MockTagAccessPolicy{ctrl: ctrl}
	mock.recorder = &MockTagAccessPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagAccessPolicy) EXPECT() *MockTagAccessPolicyMockRecorder {
	return m.recorder
}

// CanModifyImageTags mocks base method.
func (m *MockTagAccessPolicy) CanModifyImageTags(user *domain.User, image *domain.Image) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanModifyImageTags", user, image)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanModifyImageTags indicates an expected call of CanModifyImageTags.
func (mr *MockTagAccessPolicyMockRecorder) CanModifyImageTags(user, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanModifyImageTags", reflect.TypeOf((*MockTagAccessPolicy)(nil).CanModifyImageTags), user, image)
}
