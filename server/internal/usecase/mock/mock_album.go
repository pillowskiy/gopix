// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/album.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/album.go -destination=./internal/usecase/mock/mock_album.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/pillowskiy/gopix/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAlbumRepository is a mock of AlbumRepository interface.
type MockAlbumRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumRepositoryMockRecorder
}

// MockAlbumRepositoryMockRecorder is the mock recorder for MockAlbumRepository.
type MockAlbumRepositoryMockRecorder struct {
	mock *MockAlbumRepository
}

// NewMockAlbumRepository creates a new mock instance.
func NewMockAlbumRepository(ctrl *gomock.Controller) *MockAlbumRepository {
	mock := &MockAlbumRepository{ctrl: ctrl}
	mock.recorder = &MockAlbumRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumRepository) EXPECT() *MockAlbumRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAlbumRepository) Create(ctx context.Context, album *domain.Album) (*domain.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, album)
	ret0, _ := ret[0].(*domain.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAlbumRepositoryMockRecorder) Create(ctx, album any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAlbumRepository)(nil).Create), ctx, album)
}

// Delete mocks base method.
func (m *MockAlbumRepository) Delete(ctx context.Context, albumID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, albumID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAlbumRepositoryMockRecorder) Delete(ctx, albumID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAlbumRepository)(nil).Delete), ctx, albumID)
}

// DeleteImage mocks base method.
func (m *MockAlbumRepository) DeleteImage(ctx context.Context, albumID, imageID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, albumID, imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockAlbumRepositoryMockRecorder) DeleteImage(ctx, albumID, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockAlbumRepository)(nil).DeleteImage), ctx, albumID, imageID)
}

// GetAlbumImages mocks base method.
func (m *MockAlbumRepository) GetAlbumImages(ctx context.Context, albumID int, pagInput *domain.PaginationInput) (*domain.Pagination[domain.Image], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumImages", ctx, albumID, pagInput)
	ret0, _ := ret[0].(*domain.Pagination[domain.Image])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumImages indicates an expected call of GetAlbumImages.
func (mr *MockAlbumRepositoryMockRecorder) GetAlbumImages(ctx, albumID, pagInput any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumImages", reflect.TypeOf((*MockAlbumRepository)(nil).GetAlbumImages), ctx, albumID, pagInput)
}

// GetByAuthorID mocks base method.
func (m *MockAlbumRepository) GetByAuthorID(ctx context.Context, authorID int) ([]domain.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAuthorID", ctx, authorID)
	ret0, _ := ret[0].([]domain.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthorID indicates an expected call of GetByAuthorID.
func (mr *MockAlbumRepositoryMockRecorder) GetByAuthorID(ctx, authorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthorID", reflect.TypeOf((*MockAlbumRepository)(nil).GetByAuthorID), ctx, authorID)
}

// GetByID mocks base method.
func (m *MockAlbumRepository) GetByID(ctx context.Context, albumID int) (*domain.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, albumID)
	ret0, _ := ret[0].(*domain.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAlbumRepositoryMockRecorder) GetByID(ctx, albumID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAlbumRepository)(nil).GetByID), ctx, albumID)
}

// PutImage mocks base method.
func (m *MockAlbumRepository) PutImage(ctx context.Context, albumID, imageID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutImage", ctx, albumID, imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutImage indicates an expected call of PutImage.
func (mr *MockAlbumRepositoryMockRecorder) PutImage(ctx, albumID, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutImage", reflect.TypeOf((*MockAlbumRepository)(nil).PutImage), ctx, albumID, imageID)
}

// Update mocks base method.
func (m *MockAlbumRepository) Update(ctx context.Context, albumID int, album *domain.Album) (*domain.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, albumID, album)
	ret0, _ := ret[0].(*domain.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAlbumRepositoryMockRecorder) Update(ctx, albumID, album any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAlbumRepository)(nil).Update), ctx, albumID, album)
}

// MockAlbumAccessPolicy is a mock of AlbumAccessPolicy interface.
type MockAlbumAccessPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumAccessPolicyMockRecorder
}

// MockAlbumAccessPolicyMockRecorder is the mock recorder for MockAlbumAccessPolicy.
type MockAlbumAccessPolicyMockRecorder struct {
	mock *MockAlbumAccessPolicy
}

// NewMockAlbumAccessPolicy creates a new mock instance.
func NewMockAlbumAccessPolicy(ctrl *gomock.Controller) *MockAlbumAccessPolicy {
	mock := &MockAlbumAccessPolicy{ctrl: ctrl}
	mock.recorder = &MockAlbumAccessPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumAccessPolicy) EXPECT() *MockAlbumAccessPolicyMockRecorder {
	return m.recorder
}

// CanModify mocks base method.
func (m *MockAlbumAccessPolicy) CanModify(user *domain.User, album *domain.Album) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanModify", user, album)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanModify indicates an expected call of CanModify.
func (mr *MockAlbumAccessPolicyMockRecorder) CanModify(user, album any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanModify", reflect.TypeOf((*MockAlbumAccessPolicy)(nil).CanModify), user, album)
}

// MockAlbumImageUseCase is a mock of AlbumImageUseCase interface.
type MockAlbumImageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumImageUseCaseMockRecorder
}

// MockAlbumImageUseCaseMockRecorder is the mock recorder for MockAlbumImageUseCase.
type MockAlbumImageUseCaseMockRecorder struct {
	mock *MockAlbumImageUseCase
}

// NewMockAlbumImageUseCase creates a new mock instance.
func NewMockAlbumImageUseCase(ctrl *gomock.Controller) *MockAlbumImageUseCase {
	mock := &MockAlbumImageUseCase{ctrl: ctrl}
	mock.recorder = &MockAlbumImageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumImageUseCase) EXPECT() *MockAlbumImageUseCaseMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockAlbumImageUseCase) GetByID(ctx context.Context, imageID int) (*domain.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, imageID)
	ret0, _ := ret[0].(*domain.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAlbumImageUseCaseMockRecorder) GetByID(ctx, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAlbumImageUseCase)(nil).GetByID), ctx, imageID)
}
