// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/subscription.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/subscription.go -destination=./internal/usecase/mock/mock_subscription.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/pillowskiy/gopix/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionFollowingUseCase is a mock of SubscriptionFollowingUseCase interface.
type MockSubscriptionFollowingUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionFollowingUseCaseMockRecorder
}

// MockSubscriptionFollowingUseCaseMockRecorder is the mock recorder for MockSubscriptionFollowingUseCase.
type MockSubscriptionFollowingUseCaseMockRecorder struct {
	mock *MockSubscriptionFollowingUseCase
}

// NewMockSubscriptionFollowingUseCase creates a new mock instance.
func NewMockSubscriptionFollowingUseCase(ctrl *gomock.Controller) *MockSubscriptionFollowingUseCase {
	mock := &MockSubscriptionFollowingUseCase{ctrl: ctrl}
	mock.recorder = &MockSubscriptionFollowingUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionFollowingUseCase) EXPECT() *MockSubscriptionFollowingUseCaseMockRecorder {
	return m.recorder
}

// Follow mocks base method.
func (m *MockSubscriptionFollowingUseCase) Follow(ctx context.Context, userID domain.ID, executor *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", ctx, userID, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Follow indicates an expected call of Follow.
func (mr *MockSubscriptionFollowingUseCaseMockRecorder) Follow(ctx, userID, executor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockSubscriptionFollowingUseCase)(nil).Follow), ctx, userID, executor)
}

// Unfollow mocks base method.
func (m *MockSubscriptionFollowingUseCase) Unfollow(ctx context.Context, userID domain.ID, executor *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", ctx, userID, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockSubscriptionFollowingUseCaseMockRecorder) Unfollow(ctx, userID, executor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockSubscriptionFollowingUseCase)(nil).Unfollow), ctx, userID, executor)
}

// MockSubscriptionUserUseCase is a mock of SubscriptionUserUseCase interface.
type MockSubscriptionUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionUserUseCaseMockRecorder
}

// MockSubscriptionUserUseCaseMockRecorder is the mock recorder for MockSubscriptionUserUseCase.
type MockSubscriptionUserUseCaseMockRecorder struct {
	mock *MockSubscriptionUserUseCase
}

// NewMockSubscriptionUserUseCase creates a new mock instance.
func NewMockSubscriptionUserUseCase(ctrl *gomock.Controller) *MockSubscriptionUserUseCase {
	mock := &MockSubscriptionUserUseCase{ctrl: ctrl}
	mock.recorder = &MockSubscriptionUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionUserUseCase) EXPECT() *MockSubscriptionUserUseCaseMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockSubscriptionUserUseCase) GetByID(ctx context.Context, userID domain.ID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSubscriptionUserUseCaseMockRecorder) GetByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSubscriptionUserUseCase)(nil).GetByID), ctx, userID)
}
