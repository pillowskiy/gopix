// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/following.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/following.go -destination=./internal/usecase/mock/mock_following.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/pillowskiy/gopix/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockFollowingRepository is a mock of FollowingRepository interface.
type MockFollowingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFollowingRepositoryMockRecorder
}

// MockFollowingRepositoryMockRecorder is the mock recorder for MockFollowingRepository.
type MockFollowingRepositoryMockRecorder struct {
	mock *MockFollowingRepository
}

// NewMockFollowingRepository creates a new mock instance.
func NewMockFollowingRepository(ctrl *gomock.Controller) *MockFollowingRepository {
	mock := &MockFollowingRepository{ctrl: ctrl}
	mock.recorder = &MockFollowingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollowingRepository) EXPECT() *MockFollowingRepositoryMockRecorder {
	return m.recorder
}

// Follow mocks base method.
func (m *MockFollowingRepository) Follow(ctx context.Context, userID, executorID domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", ctx, userID, executorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Follow indicates an expected call of Follow.
func (mr *MockFollowingRepositoryMockRecorder) Follow(ctx, userID, executorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockFollowingRepository)(nil).Follow), ctx, userID, executorID)
}

// IsFollowing mocks base method.
func (m *MockFollowingRepository) IsFollowing(ctx context.Context, followerID, folowingID domain.ID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFollowing", ctx, followerID, folowingID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFollowing indicates an expected call of IsFollowing.
func (mr *MockFollowingRepositoryMockRecorder) IsFollowing(ctx, followerID, folowingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollowing", reflect.TypeOf((*MockFollowingRepository)(nil).IsFollowing), ctx, followerID, folowingID)
}

// Stats mocks base method.
func (m *MockFollowingRepository) Stats(ctx context.Context, userID domain.ID, executorID *domain.ID) (*domain.FollowingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", ctx, userID, executorID)
	ret0, _ := ret[0].(*domain.FollowingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockFollowingRepositoryMockRecorder) Stats(ctx, userID, executorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockFollowingRepository)(nil).Stats), ctx, userID, executorID)
}

// Unfollow mocks base method.
func (m *MockFollowingRepository) Unfollow(ctx context.Context, userID, executorID domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", ctx, userID, executorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockFollowingRepositoryMockRecorder) Unfollow(ctx, userID, executorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockFollowingRepository)(nil).Unfollow), ctx, userID, executorID)
}
