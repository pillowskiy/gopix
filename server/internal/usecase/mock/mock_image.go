// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/image.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/image.go -destination=./internal/usecase/mock/mock_image.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/pillowskiy/gopix/internal/domain"
	"github.com/pillowskiy/gopix/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockImageFileStorage is a mock of ImageFileStorage interface.
type MockImageFileStorage struct {
	ctrl     *gomock.Controller
	recorder *MockImageFileStorageMockRecorder
}

// MockImageFileStorageMockRecorder is the mock recorder for MockImageFileStorage.
type MockImageFileStorageMockRecorder struct {
	mock *MockImageFileStorage
}

// NewMockImageFileStorage creates a new mock instance.
func NewMockImageFileStorage(ctrl *gomock.Controller) *MockImageFileStorage {
	mock := &MockImageFileStorage{ctrl: ctrl}
	mock.recorder = &MockImageFileStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageFileStorage) EXPECT() *MockImageFileStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockImageFileStorage) Delete(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockImageFileStorageMockRecorder) Delete(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImageFileStorage)(nil).Delete), ctx, path)
}

// Put mocks base method.
func (m *MockImageFileStorage) Put(ctx context.Context, file *domain.FileNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockImageFileStorageMockRecorder) Put(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockImageFileStorage)(nil).Put), ctx, file)
}

// MockImageCache is a mock of ImageCache interface.
type MockImageCache struct {
	ctrl     *gomock.Controller
	recorder *MockImageCacheMockRecorder
}

// MockImageCacheMockRecorder is the mock recorder for MockImageCache.
type MockImageCacheMockRecorder struct {
	mock *MockImageCache
}

// NewMockImageCache creates a new mock instance.
func NewMockImageCache(ctrl *gomock.Controller) *MockImageCache {
	mock := &MockImageCache{ctrl: ctrl}
	mock.recorder = &MockImageCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageCache) EXPECT() *MockImageCacheMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockImageCache) Del(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockImageCacheMockRecorder) Del(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockImageCache)(nil).Del), ctx, id)
}

// Get mocks base method.
func (m *MockImageCache) Get(ctx context.Context, id string) (*domain.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*domain.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImageCacheMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImageCache)(nil).Get), ctx, id)
}

// Set mocks base method.
func (m *MockImageCache) Set(ctx context.Context, id string, image *domain.Image, ttl int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, id, image, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockImageCacheMockRecorder) Set(ctx, id, image, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockImageCache)(nil).Set), ctx, id, image, ttl)
}

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// AddLike mocks base method.
func (m *MockImageRepository) AddLike(ctx context.Context, imageID, userID domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLike", ctx, imageID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLike indicates an expected call of AddLike.
func (mr *MockImageRepositoryMockRecorder) AddLike(ctx, imageID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLike", reflect.TypeOf((*MockImageRepository)(nil).AddLike), ctx, imageID, userID)
}

// AddView mocks base method.
func (m *MockImageRepository) AddView(ctx context.Context, imageID domain.ID, userID *domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddView", ctx, imageID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddView indicates an expected call of AddView.
func (mr *MockImageRepositoryMockRecorder) AddView(ctx, imageID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddView", reflect.TypeOf((*MockImageRepository)(nil).AddView), ctx, imageID, userID)
}

// Create mocks base method.
func (m *MockImageRepository) Create(ctx context.Context, image *domain.Image) (*domain.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, image)
	ret0, _ := ret[0].(*domain.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockImageRepositoryMockRecorder) Create(ctx, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImageRepository)(nil).Create), ctx, image)
}

// Delete mocks base method.
func (m *MockImageRepository) Delete(ctx context.Context, id domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockImageRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImageRepository)(nil).Delete), ctx, id)
}

// Discover mocks base method.
func (m *MockImageRepository) Discover(ctx context.Context, pagInput *domain.PaginationInput, sort domain.ImageSortMethod) (*domain.Pagination[domain.ImageWithAuthor], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discover", ctx, pagInput, sort)
	ret0, _ := ret[0].(*domain.Pagination[domain.ImageWithAuthor])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Discover indicates an expected call of Discover.
func (mr *MockImageRepositoryMockRecorder) Discover(ctx, pagInput, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discover", reflect.TypeOf((*MockImageRepository)(nil).Discover), ctx, pagInput, sort)
}

// DoInTransaction mocks base method.
func (m *MockImageRepository) DoInTransaction(arg0 context.Context, arg1 repository.InTransactionalCall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoInTransaction indicates an expected call of DoInTransaction.
func (mr *MockImageRepositoryMockRecorder) DoInTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInTransaction", reflect.TypeOf((*MockImageRepository)(nil).DoInTransaction), arg0, arg1)
}

// FindMany mocks base method.
func (m *MockImageRepository) FindMany(ctx context.Context, ids []domain.ID) ([]domain.ImageWithAuthor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", ctx, ids)
	ret0, _ := ret[0].([]domain.ImageWithAuthor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockImageRepositoryMockRecorder) FindMany(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockImageRepository)(nil).FindMany), ctx, ids)
}

// GetByID mocks base method.
func (m *MockImageRepository) GetByID(ctx context.Context, id domain.ID) (*domain.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockImageRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockImageRepository)(nil).GetByID), ctx, id)
}

// GetDetailed mocks base method.
func (m *MockImageRepository) GetDetailed(ctx context.Context, id domain.ID) (*domain.DetailedImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailed", ctx, id)
	ret0, _ := ret[0].(*domain.DetailedImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailed indicates an expected call of GetDetailed.
func (mr *MockImageRepositoryMockRecorder) GetDetailed(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailed", reflect.TypeOf((*MockImageRepository)(nil).GetDetailed), ctx, id)
}

// HasLike mocks base method.
func (m *MockImageRepository) HasLike(ctx context.Context, imageID, userID domain.ID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLike", ctx, imageID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasLike indicates an expected call of HasLike.
func (mr *MockImageRepositoryMockRecorder) HasLike(ctx, imageID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLike", reflect.TypeOf((*MockImageRepository)(nil).HasLike), ctx, imageID, userID)
}

// RemoveLike mocks base method.
func (m *MockImageRepository) RemoveLike(ctx context.Context, imageID, userID domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLike", ctx, imageID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLike indicates an expected call of RemoveLike.
func (mr *MockImageRepositoryMockRecorder) RemoveLike(ctx, imageID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLike", reflect.TypeOf((*MockImageRepository)(nil).RemoveLike), ctx, imageID, userID)
}

// States mocks base method.
func (m *MockImageRepository) States(ctx context.Context, imageID, userID domain.ID) (*domain.ImageStates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "States", ctx, imageID, userID)
	ret0, _ := ret[0].(*domain.ImageStates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// States indicates an expected call of States.
func (mr *MockImageRepositoryMockRecorder) States(ctx, imageID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "States", reflect.TypeOf((*MockImageRepository)(nil).States), ctx, imageID, userID)
}

// Update mocks base method.
func (m *MockImageRepository) Update(ctx context.Context, id domain.ID, image *domain.Image) (*domain.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, image)
	ret0, _ := ret[0].(*domain.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockImageRepositoryMockRecorder) Update(ctx, id, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockImageRepository)(nil).Update), ctx, id, image)
}

// MockImageVecRepository is a mock of ImageVecRepository interface.
type MockImageVecRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageVecRepositoryMockRecorder
}

// MockImageVecRepositoryMockRecorder is the mock recorder for MockImageVecRepository.
type MockImageVecRepositoryMockRecorder struct {
	mock *MockImageVecRepository
}

// NewMockImageVecRepository creates a new mock instance.
func NewMockImageVecRepository(ctrl *gomock.Controller) *MockImageVecRepository {
	mock := &MockImageVecRepository{ctrl: ctrl}
	mock.recorder = &MockImageVecRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageVecRepository) EXPECT() *MockImageVecRepositoryMockRecorder {
	return m.recorder
}

// DeleteFeatures mocks base method.
func (m *MockImageVecRepository) DeleteFeatures(ctx context.Context, imageID domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeatures", ctx, imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeatures indicates an expected call of DeleteFeatures.
func (mr *MockImageVecRepositoryMockRecorder) DeleteFeatures(ctx, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeatures", reflect.TypeOf((*MockImageVecRepository)(nil).DeleteFeatures), ctx, imageID)
}

// Features mocks base method.
func (m *MockImageVecRepository) Features(ctx context.Context, imageID domain.ID, file *domain.FileNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features", ctx, imageID, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Features indicates an expected call of Features.
func (mr *MockImageVecRepositoryMockRecorder) Features(ctx, imageID, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockImageVecRepository)(nil).Features), ctx, imageID, file)
}

// Similar mocks base method.
func (m *MockImageVecRepository) Similar(ctx context.Context, imageID domain.ID) ([]domain.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Similar", ctx, imageID)
	ret0, _ := ret[0].([]domain.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Similar indicates an expected call of Similar.
func (mr *MockImageVecRepositoryMockRecorder) Similar(ctx, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Similar", reflect.TypeOf((*MockImageVecRepository)(nil).Similar), ctx, imageID)
}

// MockImageAccessPolicy is a mock of ImageAccessPolicy interface.
type MockImageAccessPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockImageAccessPolicyMockRecorder
}

// MockImageAccessPolicyMockRecorder is the mock recorder for MockImageAccessPolicy.
type MockImageAccessPolicyMockRecorder struct {
	mock *MockImageAccessPolicy
}

// NewMockImageAccessPolicy creates a new mock instance.
func NewMockImageAccessPolicy(ctrl *gomock.Controller) *MockImageAccessPolicy {
	mock := &MockImageAccessPolicy{ctrl: ctrl}
	mock.recorder = &MockImageAccessPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageAccessPolicy) EXPECT() *MockImageAccessPolicyMockRecorder {
	return m.recorder
}

// CanModify mocks base method.
func (m *MockImageAccessPolicy) CanModify(user *domain.User, image *domain.Image) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanModify", user, image)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanModify indicates an expected call of CanModify.
func (mr *MockImageAccessPolicyMockRecorder) CanModify(user, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanModify", reflect.TypeOf((*MockImageAccessPolicy)(nil).CanModify), user, image)
}
