// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/auth.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/auth.go -destination=./internal/usecase/mock/mock_auth.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/pillowskiy/gopix/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthRepository) Create(ctx context.Context, user *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthRepositoryMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthRepository)(nil).Create), ctx, user)
}

// GetByID mocks base method.
func (m *MockAuthRepository) GetByID(ctx context.Context, id domain.ID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAuthRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAuthRepository)(nil).GetByID), ctx, id)
}

// GetUnique mocks base method.
func (m *MockAuthRepository) GetUnique(ctx context.Context, user *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnique", ctx, user)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnique indicates an expected call of GetUnique.
func (mr *MockAuthRepositoryMockRecorder) GetUnique(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnique", reflect.TypeOf((*MockAuthRepository)(nil).GetUnique), ctx, user)
}

// MockAuthCache is a mock of AuthCache interface.
type MockAuthCache struct {
	ctrl     *gomock.Controller
	recorder *MockAuthCacheMockRecorder
}

// MockAuthCacheMockRecorder is the mock recorder for MockAuthCache.
type MockAuthCacheMockRecorder struct {
	mock *MockAuthCache
}

// NewMockAuthCache creates a new mock instance.
func NewMockAuthCache(ctrl *gomock.Controller) *MockAuthCache {
	mock := &MockAuthCache{ctrl: ctrl}
	mock.recorder = &MockAuthCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthCache) EXPECT() *MockAuthCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAuthCache) Get(ctx context.Context, id string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAuthCacheMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAuthCache)(nil).Get), ctx, id)
}

// Set mocks base method.
func (m *MockAuthCache) Set(ctx context.Context, id string, user *domain.User, ttl int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, id, user, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockAuthCacheMockRecorder) Set(ctx, id, user, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockAuthCache)(nil).Set), ctx, id, user, ttl)
}
