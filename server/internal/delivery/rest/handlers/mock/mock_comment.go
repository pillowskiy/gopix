// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/delivery/rest/handlers/comment.go
//
// Generated by this command:
//
//	mockgen -source=./internal/delivery/rest/handlers/comment.go -destination=./internal/delivery/rest/handlers/mock/mock_comment.go
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	domain "github.com/pillowskiy/gopix/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCommentUseCase is a mock of CommentUseCase interface.
type MockCommentUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCommentUseCaseMockRecorder
}

// MockCommentUseCaseMockRecorder is the mock recorder for MockCommentUseCase.
type MockCommentUseCaseMockRecorder struct {
	mock *MockCommentUseCase
}

// NewMockCommentUseCase creates a new mock instance.
func NewMockCommentUseCase(ctrl *gomock.Controller) *MockCommentUseCase {
	mock := &MockCommentUseCase{ctrl: ctrl}
	mock.recorder = &MockCommentUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentUseCase) EXPECT() *MockCommentUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentUseCase) Create(ctx context.Context, comment *domain.Comment) (*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, comment)
	ret0, _ := ret[0].(*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommentUseCaseMockRecorder) Create(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentUseCase)(nil).Create), ctx, comment)
}

// Delete mocks base method.
func (m *MockCommentUseCase) Delete(ctx context.Context, commentID domain.ID, executor *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, commentID, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentUseCaseMockRecorder) Delete(ctx, commentID, executor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentUseCase)(nil).Delete), ctx, commentID, executor)
}

// GetByImageID mocks base method.
func (m *MockCommentUseCase) GetByImageID(ctx context.Context, imageID domain.ID, pagInput *domain.PaginationInput, sort domain.CommentSortMethod) (*domain.Pagination[domain.DetailedComment], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByImageID", ctx, imageID, pagInput, sort)
	ret0, _ := ret[0].(*domain.Pagination[domain.DetailedComment])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByImageID indicates an expected call of GetByImageID.
func (mr *MockCommentUseCaseMockRecorder) GetByImageID(ctx, imageID, pagInput, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByImageID", reflect.TypeOf((*MockCommentUseCase)(nil).GetByImageID), ctx, imageID, pagInput, sort)
}

// GetReplies mocks base method.
func (m *MockCommentUseCase) GetReplies(ctx context.Context, commentID domain.ID, executorID *domain.ID) ([]domain.DetailedComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplies", ctx, commentID, executorID)
	ret0, _ := ret[0].([]domain.DetailedComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplies indicates an expected call of GetReplies.
func (mr *MockCommentUseCaseMockRecorder) GetReplies(ctx, commentID, executorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplies", reflect.TypeOf((*MockCommentUseCase)(nil).GetReplies), ctx, commentID, executorID)
}

// LikeComment mocks base method.
func (m *MockCommentUseCase) LikeComment(ctx context.Context, commentID domain.ID, executor *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeComment", ctx, commentID, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeComment indicates an expected call of LikeComment.
func (mr *MockCommentUseCaseMockRecorder) LikeComment(ctx, commentID, executor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeComment", reflect.TypeOf((*MockCommentUseCase)(nil).LikeComment), ctx, commentID, executor)
}

// UnlikeComment mocks base method.
func (m *MockCommentUseCase) UnlikeComment(ctx context.Context, commentID domain.ID, executor *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeComment", ctx, commentID, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikeComment indicates an expected call of UnlikeComment.
func (mr *MockCommentUseCaseMockRecorder) UnlikeComment(ctx, commentID, executor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeComment", reflect.TypeOf((*MockCommentUseCase)(nil).UnlikeComment), ctx, commentID, executor)
}

// Update mocks base method.
func (m *MockCommentUseCase) Update(ctx context.Context, commentID domain.ID, comment *domain.Comment, executor *domain.User) (*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, commentID, comment, executor)
	ret0, _ := ret[0].(*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCommentUseCaseMockRecorder) Update(ctx, commentID, comment, executor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommentUseCase)(nil).Update), ctx, commentID, comment, executor)
}
