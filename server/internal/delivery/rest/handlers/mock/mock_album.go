// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/delivery/rest/handlers/album.go
//
// Generated by this command:
//
//	mockgen -source=./internal/delivery/rest/handlers/album.go -destination=./internal/delivery/rest/handlers/mock/mock_album.go
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	domain "github.com/pillowskiy/gopix/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockalbumUseCase is a mock of albumUseCase interface.
type MockalbumUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockalbumUseCaseMockRecorder
}

// MockalbumUseCaseMockRecorder is the mock recorder for MockalbumUseCase.
type MockalbumUseCaseMockRecorder struct {
	mock *MockalbumUseCase
}

// NewMockalbumUseCase creates a new mock instance.
func NewMockalbumUseCase(ctrl *gomock.Controller) *MockalbumUseCase {
	mock := &MockalbumUseCase{ctrl: ctrl}
	mock.recorder = &MockalbumUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockalbumUseCase) EXPECT() *MockalbumUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockalbumUseCase) Create(ctx context.Context, album *domain.Album) (*domain.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, album)
	ret0, _ := ret[0].(*domain.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockalbumUseCaseMockRecorder) Create(ctx, album any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockalbumUseCase)(nil).Create), ctx, album)
}

// Delete mocks base method.
func (m *MockalbumUseCase) Delete(ctx context.Context, albumID domain.ID, executor *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, albumID, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockalbumUseCaseMockRecorder) Delete(ctx, albumID, executor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockalbumUseCase)(nil).Delete), ctx, albumID, executor)
}

// DeleteImage mocks base method.
func (m *MockalbumUseCase) DeleteImage(ctx context.Context, albumID, imageID domain.ID, executor *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, albumID, imageID, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockalbumUseCaseMockRecorder) DeleteImage(ctx, albumID, imageID, executor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockalbumUseCase)(nil).DeleteImage), ctx, albumID, imageID, executor)
}

// GetAlbumImages mocks base method.
func (m *MockalbumUseCase) GetAlbumImages(ctx context.Context, albumID domain.ID, pagInput *domain.PaginationInput) (*domain.Pagination[domain.ImageWithAuthor], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumImages", ctx, albumID, pagInput)
	ret0, _ := ret[0].(*domain.Pagination[domain.ImageWithAuthor])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumImages indicates an expected call of GetAlbumImages.
func (mr *MockalbumUseCaseMockRecorder) GetAlbumImages(ctx, albumID, pagInput any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumImages", reflect.TypeOf((*MockalbumUseCase)(nil).GetAlbumImages), ctx, albumID, pagInput)
}

// GetByAuthorID mocks base method.
func (m *MockalbumUseCase) GetByAuthorID(ctx context.Context, authorID domain.ID) ([]domain.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAuthorID", ctx, authorID)
	ret0, _ := ret[0].([]domain.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthorID indicates an expected call of GetByAuthorID.
func (mr *MockalbumUseCaseMockRecorder) GetByAuthorID(ctx, authorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthorID", reflect.TypeOf((*MockalbumUseCase)(nil).GetByAuthorID), ctx, authorID)
}

// PutImage mocks base method.
func (m *MockalbumUseCase) PutImage(ctx context.Context, albumID, imageID domain.ID, executor *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutImage", ctx, albumID, imageID, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutImage indicates an expected call of PutImage.
func (mr *MockalbumUseCaseMockRecorder) PutImage(ctx, albumID, imageID, executor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutImage", reflect.TypeOf((*MockalbumUseCase)(nil).PutImage), ctx, albumID, imageID, executor)
}

// Update mocks base method.
func (m *MockalbumUseCase) Update(ctx context.Context, albumID domain.ID, album *domain.Album, executor *domain.User) (*domain.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, albumID, album, executor)
	ret0, _ := ret[0].(*domain.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockalbumUseCaseMockRecorder) Update(ctx, albumID, album, executor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockalbumUseCase)(nil).Update), ctx, albumID, album, executor)
}
