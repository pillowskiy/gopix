// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/token/token.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/token/token.go -destination=./pkg/token/mock/mock_token.go
//

// Package mock_token is a generated GoMock package.
package mock_token

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenGenerator is a mock of TokenGenerator interface.
type MockTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGeneratorMockRecorder
}

// MockTokenGeneratorMockRecorder is the mock recorder for MockTokenGenerator.
type MockTokenGeneratorMockRecorder struct {
	mock *MockTokenGenerator
}

// NewMockTokenGenerator creates a new mock instance.
func NewMockTokenGenerator(ctrl *gomock.Controller) *MockTokenGenerator {
	mock := &MockTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGenerator) EXPECT() *MockTokenGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockTokenGenerator) Generate(payload any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockTokenGeneratorMockRecorder) Generate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTokenGenerator)(nil).Generate), payload)
}

// Verify mocks base method.
func (m *MockTokenGenerator) Verify(token string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", token)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockTokenGeneratorMockRecorder) Verify(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockTokenGenerator)(nil).Verify), token)
}

// VerifyAndScan mocks base method.
func (m *MockTokenGenerator) VerifyAndScan(token string, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAndScan", token, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAndScan indicates an expected call of VerifyAndScan.
func (mr *MockTokenGeneratorMockRecorder) VerifyAndScan(token, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAndScan", reflect.TypeOf((*MockTokenGenerator)(nil).VerifyAndScan), token, dest)
}
